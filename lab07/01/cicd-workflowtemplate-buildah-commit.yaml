apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: cicd-workflow-template
  annotations:
    workflows.argoproj.io/description: |
      This workflow is implementing CICD for simple GO API.
spec: 
  serviceAccountName: workflow-executor-sa
  volumes:               # define volume, same syntax as k8s Pod spec
  - name: work
    persistentVolumeClaim: 
      claimName: cicd-workflow-pvc
  arguments: 
    parameters:
      - name: cloneUrl 
        value: test
      - name: revision 
        value: hello        
      - name: commitId
        value: dev
      - name: message
        value: test        
      - name: pathToDockerfile
        value : deployment/Dockerfile
      - name: imageUrl
        value: docker.io/nexweb1/sample
      - name: imageTag
        value: dev
      - name: deploymentFile
        value: deployment/Kucstomization.yaml
  entrypoint: main
  podGC:
    strategy: OnPodSuccess  

  templates: 
    - name: main 
      dag: 
        tasks: 
          - name: git-clone 
            template: git-clone 
            arguments:
              parameters:
                - name: cloneUrl # URL for the repo to be patched
                  value: "{{workflow.parameters.cloneUrl}}"                    
                - name: revision
                  value: "{{workflow.parameters.revision}}"
                - name: commitId 
                  value: "{{workflow.parameters.commitId}}" 
                - name: message 
                  value: "{{workflow.parameters.message}}"              
          - name: maven-build
            template: maven-build
            arguments:
              artifacts:
          - name: source
            from: "{{tasks.git-clone.outputs.artifacts.source}}"            
            dependencies:
              - git-clone 
          - name: docker-build 
            template: docker-build 
            arguments:
              artifacts:
              - name: source
                from: "{{tasks.maven-build.outputs.artifacts.source}}"
              parameters:
                - name: imageUrl
                  value: "docker.io/nexweb1/sample"
                - name: commitId
                  value: "{{workflow.parameters.commitId}}" 
                - name: pathToDockerfile
                  value: "deployment/Dockerfile" 
            dependencies: 
              - maven-build 
          - name: commit  
            template: deploy 
            arguments:
              artifacts:
              - name: source
                from: "{{tasks.docker-build.outputs.artifacts.source}}"
              arguments:
                parameters:
                - name: git-repo-revision
                  value: main
                - name: git-repo-path
                  value: "/."
                - name: git-repo-url
                  value: https://github.com/yoonjk/sample-service-deploy.git               
                - name: deploymentFile
                  value: deployment/sample.yaml
                - name: imageUrl
                  value: "docker.io/nexweb1/sample"
                - name: commitId
                  value: "{{workflow.parameters.commitId}}"                
            dependencies: 
              - docker-build
    - name: git-clone 
      inputs:
        parameters:
        - name: cloneUrl # URL for the repo to be patched                
        - name: revision
        - name: commitId 
        - name: message 
        artifacts:
        - name: source
          path: /src
          git:
            repo: "{{inputs.parameters.cloneUrl}}"
            revision: "{{inputs.parameters.revision}}"

      container:
        image: alpine/git
        command: [sh, -c]
        args: ["cd /src && git status && ls -l && git rev-parse --short HEAD > /tmp/git-commit"]
      outputs:
        artifacts:
          - name: source
            path: /src
            s3: 
              key: source.tgz
        parameters:
          - name: tag
            valueFrom:
              path: /tmp/git-commit     
    - name: maven-build
      inputs:
        artifacts:
        - name: source
          path: /src
          s3: 
            key: source.tgz
      container:
        image: gcr.io/cloud-builders/mvn:latest
        command: [sh, -c]
        args: ["cd /src && ls -a &&  mvn clean package -DskipTests"]
      outputs:
        artifacts:
        - name: source
          path: /src
          s3: 
            key: source.tgz
    - name: docker-build 
      inputs:
          artifacts:
          - name: source
            path: /src
            s3: 
              key: source.tgz 
          parameters:    
          - name: imageUrl
          - name: commitId
          - name: pathToDockerfile
      container:
          image: quay.io/buildah/stable
          command: [ sh, -euxc ]
          args: 
          - |
            buildah bud --tls-verify=true --layers -f '{{inputs.parameters.pathToDockerfile}}' -t '{{inputs.parameters.imageUrl}}:{{inputs.parameters.commitId}}' .
            buildah push --tls-verify=true  '{{inputs.parameters.imageUrl}}:{{inputs.parameters.commitId}}'

          workingDir: "/src"
          securityContext:
            allowPrivilegeEscalation: true
            runAsUser: 0
            privileged: true
          env:
            - name: DOCKER_CONFIG
              value: /.docker
          volumeMounts:
            - name: docker-config
              mountPath: /.docker
            - name: varlibc
              mountPath: /var/lib/containers
      outputs:
        artifacts:
        - name: source
          path: /src
      volumes:
        - name: docker-config
          secret:
            secretName: docker-credentials
            items:
              - key: .dockerconfigjson
                path: config.json
        - name: varlibc 
          emptyDir: {}
    - name: commit
      inputs:
        parameters:
          - name: git-repo-revision
          - name: git-repo-path
          - name: git-repo-url              
          - name: deploymentFile
          - name: imageUrl
          - name: commitId
        artifacts:
        - name: source
          path: /manifest
          git:
            repo: "{{inputs.parameters.git-repo-url }}"
            revision: "{{inputs.parameters.git-repo-revision}}"

      container:
        image: alpine/git
        command: [sh, -euxc]
        args: ["
          cd /manifest; 

          git clone -b {{inputs.parameters.git-repo-revision}} {{inputs.parameters.git-repo-url}};

          cd sample-service-deploy;
        
          git config --global user.email 'nexweb1@gmail.com';
          git config --global user.name  'yoonjk';
          ls -al;
          cat {{inputs.parameters.deploymentFile}} | grep -E 'image:' | awk '{print $0 }';
          sed -i 's#{{inputs.parameters.imageUrl}}:[a-zA-Z0-9]\\+#{{inputs.parameters.imageUrl}}:{{inputs.parameters.commitId}}#g' '{{inputs.parameters.deploymentFile}}';
          cat {{inputs.parameters.deploymentFile}} | grep -E 'image:' | awk '{print $0 }';
  
          git add {{inputs.parameters.deploymentFile}};
          git commit -m '[tekton] updating {{inputs.parameters.imageUrl}} image to {{inputs.parameters.commitId}}';
          git push https://${GITHUB_USER}:${GITHUB_PASSWORD}@github.com/yoonjk/sample-service-deploy.git
          "]
        env:
        - name: GITHUB_USER
          valueFrom:
            secretKeyRef:
              name: github-basic
              key: username
        - name: GITHUB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: github-basic
              key: personal_access_token
      outputs:
        artifacts:
          - name: source
            path: /manifest